

Registers: Initial State

ax             0x0                 0
dx             0x0                 0
eax            0x0                 0
edx            0x0                 0

--------------------------------------------------------------------------------
     movw  opWord (100), %ax

Registers: After Execution

ax             0x64                100
dx             0x0                 0
eax            0x64                100
edx            0x0                 0

All registers have the same content since 0x64 can fit in a 16-bit register.
--------------------------------------------------------------------------------
     imulw  %ax

Registers: After Execution

ax             0x2710              10000
dx             0x0                 0
eax            0x2710              10000
edx            0x0                 0

All registers have the same content since 0x2710 can fit in a 16-bit register.
--------------------------------------------------------------------------------
     movl  opLong (1000), %eax

Registers: After Execution
ax             0x3e8               1000
dx             0x0                 0
eax            0x3e8               1000
edx            0x0                 0

All registers have the same content since 0x3e8 can fit in a 16-bit register.
--------------------------------------------------------------------------------
     imull  %eax

Registers: After Execution
ax             0x4240              16960
dx             0x0                 0
eax            0xf4240             1000000
edx            0x0                 0

0xf4240 can only fit a 32-bit register and cannot fit a 16-bit register.
Hence f got truncated in ax to 0x4240.
--------------------------------------------------------------------------------
     movw  opWord, %ax
     movw  opWord, %dx

Registers: After Execution
ax             0x64                100
dx             0x64                100
eax            0xf0064             983140
edx            0x64                100

movw set the lower 16-bit of all registers.  The f in eax was leftover from the previous operation.
--------------------------------------------------------------------------------
     idivw  sourceWord (4000)

Registers: After Execution
ax             0x666               1638
dx             0x6a4               1700
eax            0xf0666             984678
edx            0x6a4               1700

0x0064:0x0064 idivw 4000 = 0x0666:0x06a
since only the lower 16-bit is affected for eax and edx, the result is 0x06a4:0xf0666 
where 06 and f0 were leftovers from the previous operation
--------------------------------------------------------------------------------
     movl  opLong (1000), %eax
     movl  opLong (1000), %edx

Registers: After Execution
ax             0x3e8               1000
dx             0x3e8               1000
eax            0x3e8               1000
edx            0x3e8               1000

movw set the lower 16-bit of all registers.  All have the same value
--------------------------------------------------------------------------------
     idivl  sourceLong (5000)

Registers: After Execution
ax             0x3333              13107
dx             0x7d0               2000
eax            0x33333333          858993459
edx            0x7d0               2000

0x03e8:0x03e8 idiv 5000 = 0x07d0:0x33333333.  dx, eax and edx has the right values.
ax got the lower 16-bit of eax only hence 0x3333.
--------------------------------------------------------------------------------